using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using HseAr.Data;
using HseAr.Data.Entities;
using HseAr.Data.Interfaces;
using HseAr.Infrastructure;
using Microsoft.EntityFrameworkCore;

namespace HseAr.DataAccess.EFCore.Repositories
{
    public class BuildingRepository : IBuildingRepository
    {
        private readonly EFCoreContext _context;

        public BuildingRepository(EFCoreContext context)
        {
            _context = context;
        }

        public async Task<List<Building>> GetList() 
            => (await _context.Buildings.AsNoTracking().ToListAsync()).ToList();

        public async Task<Building> GetById(Guid id)
            => await _context.Buildings.Include(b => b.Floors).FirstOrDefaultAsync(x => x.Id == id);

<<<<<<< HEAD
        public async Task<List<Building>> GetListByUserId(Guid userId)
        {
            var user = _context.Users.Include(x => x.UserBuildings).FirstOrDefault(u => u.Id == userId);
            return user.UserBuildings
                .Select(ub => _context.Buildings.Include(x => x.Floors).FirstOrDefault(b => b.Id == ub.BuildingId))
                .ToList();
        }
        
        public async Task<Building> AddFromUser(Building building, Guid userId)
=======
        public async Task<List<Building>> GetListByCompanyId(Guid companyId)
            => await _context.Buildings.Where(building => building.CompanyId == companyId).ToListAsync();

  
        public async Task<Building> Add(Building building)
>>>>>>> 9e8b958ec80a8325f8b24eb16c515ec42817e4f8
        {
            var result = await _context.Buildings.AddAsync(building);
            await _context.SaveChangesAsync();
            
            return result.Entity;
        }
        
        public async Task Update(Building building)
        {
            _context.Buildings.Update(building);
            await _context.SaveChangesAsync();
        }
        
        public async Task Delete(Guid id)
        {
            var building = await _context.Buildings.FirstOrDefaultAsync(x => x.Id == id);
            _context.Buildings.Remove(building);
            await _context.SaveChangesAsync();
        }
    }
}
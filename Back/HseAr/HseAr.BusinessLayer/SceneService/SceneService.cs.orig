using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using HseAr.BusinessLayer.SceneService.Constructors;
using HseAr.Data;
using HseAr.Data.DataProjections;
using HseAr.Data.Enums;
<<<<<<< HEAD
using HseAr.Data.Interfaces;
=======
using HseAr.Integration.SceneExport;
>>>>>>> 174449ea5f8974d7807383b68b326f2002588bdb
using MongoDB.Driver;
using HseAr.DataAccess.Mongodb.SceneModificationHandlers;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;

namespace HseAr.BusinessLayer.SceneService
{
    public class SceneService : ISceneService
    {
        private readonly IUnitOfWork _data;
<<<<<<< HEAD
        private readonly List<ISceneModificationHandler> _modificationHandlers;

        public SceneService(IUnitOfWork data, IServiceProvider serviceProvider)
        {
            _data = data;
            _modificationHandlers = serviceProvider.GetServices<ISceneModificationHandler>().ToList();
=======
        private readonly ISceneExportApiClient _sceneExport;

        public SceneService(
            IUnitOfWork data,
            ISceneExportApiClient sceneExport)
        {
            _data = data;
            _sceneExport = sceneExport;
>>>>>>> 174449ea5f8974d7807383b68b326f2002588bdb
        }

        public async Task<string> UploadScene(Scene scene)
        {
            
            return await _sceneExport.ExportScene(scene);
        }

        public async Task<Scene> GetUserSceneByFloorId(Guid id, Guid userId)
        {
            var floor = await _data.Floors.GetById(id);

            var building = await _data.Buildings.GetById(floor.BuildingId);
            if (!building.UserBuildingEntities.Any(ub => ub.UserId == userId))
            {
                throw new Exception();
            }
            
            return await _data.Scenes.GetById(floor.SceneId);
        }
        
        public async Task<Scene> AddEmptyScene()
        {
            var emptyScene = EmptySceneConstructor.CreateEmptyScene();

            var sceneResult = await _data.Scenes.Create(emptyScene);
            return sceneResult;
        }
        
        public async Task<bool> ApplyAndSaveSceneModifications(IEnumerable<SceneModification> sceneMods, Guid userId)
        {
            //CheckModelOwnership(sceneModificationDto.ModelId, userId);
            var result = true;
            foreach (var sceneMod in sceneMods)
            {
                result &= await ApplySceneModification(sceneMod);
            }

            if (result)
            {
                await SaveSceneModifications(sceneMods);
            }
            
            return result;
        }
        
        private async Task<bool> ApplySceneModification(SceneModification sceneMod)
        {
            UpdateResult result = null;


            foreach (ISceneModificationHandler handler in _modificationHandlers)
            {
                if (handler.CatchTypeMatch(sceneMod.Type.ToString()))
                {
                    result = await handler.Modify(sceneMod);
                    break;
                }
            }


            //switch (sceneMod.Type)
            //{
            //    case SceneModificationType.Add:
            //        result = await _data.SceneElements.InsertElementToModel(sceneMod);
            //        break;

            //    case SceneModificationType.Delete:
            //        result = await _data.SceneElements.DeleteElementFromScene(sceneMod);
            //        break;

            //    case SceneModificationType.Update:
            //        result = await _data.SceneElements.UpdateElement(sceneMod);
            //        break;

            //    default: 
            //        result = null;
            //        break;
            //}

            if (result == null || !result.IsAcknowledged)
            {
                return false;
            }

            return true;
        }

        private async Task SaveSceneModifications(IEnumerable<SceneModification> sceneMods)
        {
            foreach (var sceneMod in sceneMods)
            {
                await _data.SceneModifications.CreateAsync(sceneMod);
            }
        }
    }
}

